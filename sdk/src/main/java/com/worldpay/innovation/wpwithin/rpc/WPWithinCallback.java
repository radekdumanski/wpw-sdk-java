/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.worldpay.innovation.wpwithin.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-05")
public class WPWithinCallback {

  /**
   * WorldpayWithin Callback Service - RPC clients implement this service to enable callbacks from WorldpayWithin Service
   */
  public interface Iface {

    public void beginServiceDelivery(int serviceID, int servicePriceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsToSupply) throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException;

    public void endServiceDelivery(int serviceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsReceived) throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException;

    public void makePaymentEvent(int totalPrice, java.lang.String orderCurrency, java.lang.String clientToken, java.lang.String orderDescription, java.lang.String uuid) throws org.apache.thrift.TException;

    public void serviceDiscoveryEvent(java.lang.String remoteAddr) throws org.apache.thrift.TException;

    public void servicePricesEvent(java.lang.String remoteAddr, int serviceId) throws org.apache.thrift.TException;

    public void serviceTotalPriceEvent(java.lang.String remoteAddr, int serviceID, com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp) throws org.apache.thrift.TException;

    public void errorEvent(java.lang.String msg) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void beginServiceDelivery(int serviceID, int servicePriceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsToSupply, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void endServiceDelivery(int serviceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsReceived, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void makePaymentEvent(int totalPrice, java.lang.String orderCurrency, java.lang.String clientToken, java.lang.String orderDescription, java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void serviceDiscoveryEvent(java.lang.String remoteAddr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void servicePricesEvent(java.lang.String remoteAddr, int serviceId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void serviceTotalPriceEvent(java.lang.String remoteAddr, int serviceID, com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void errorEvent(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void beginServiceDelivery(int serviceID, int servicePriceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsToSupply) throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException
    {
      send_beginServiceDelivery(serviceID, servicePriceID, serviceDeliveryToken, unitsToSupply);
      recv_beginServiceDelivery();
    }

    public void send_beginServiceDelivery(int serviceID, int servicePriceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsToSupply) throws org.apache.thrift.TException
    {
      beginServiceDelivery_args args = new beginServiceDelivery_args();
      args.setServiceID(serviceID);
      args.setServicePriceID(servicePriceID);
      args.setServiceDeliveryToken(serviceDeliveryToken);
      args.setUnitsToSupply(unitsToSupply);
      sendBase("beginServiceDelivery", args);
    }

    public void recv_beginServiceDelivery() throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException
    {
      beginServiceDelivery_result result = new beginServiceDelivery_result();
      receiveBase(result, "beginServiceDelivery");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void endServiceDelivery(int serviceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsReceived) throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException
    {
      send_endServiceDelivery(serviceID, serviceDeliveryToken, unitsReceived);
      recv_endServiceDelivery();
    }

    public void send_endServiceDelivery(int serviceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsReceived) throws org.apache.thrift.TException
    {
      endServiceDelivery_args args = new endServiceDelivery_args();
      args.setServiceID(serviceID);
      args.setServiceDeliveryToken(serviceDeliveryToken);
      args.setUnitsReceived(unitsReceived);
      sendBase("endServiceDelivery", args);
    }

    public void recv_endServiceDelivery() throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException
    {
      endServiceDelivery_result result = new endServiceDelivery_result();
      receiveBase(result, "endServiceDelivery");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void makePaymentEvent(int totalPrice, java.lang.String orderCurrency, java.lang.String clientToken, java.lang.String orderDescription, java.lang.String uuid) throws org.apache.thrift.TException
    {
      send_makePaymentEvent(totalPrice, orderCurrency, clientToken, orderDescription, uuid);
      recv_makePaymentEvent();
    }

    public void send_makePaymentEvent(int totalPrice, java.lang.String orderCurrency, java.lang.String clientToken, java.lang.String orderDescription, java.lang.String uuid) throws org.apache.thrift.TException
    {
      makePaymentEvent_args args = new makePaymentEvent_args();
      args.setTotalPrice(totalPrice);
      args.setOrderCurrency(orderCurrency);
      args.setClientToken(clientToken);
      args.setOrderDescription(orderDescription);
      args.setUuid(uuid);
      sendBase("makePaymentEvent", args);
    }

    public void recv_makePaymentEvent() throws org.apache.thrift.TException
    {
      makePaymentEvent_result result = new makePaymentEvent_result();
      receiveBase(result, "makePaymentEvent");
      return;
    }

    public void serviceDiscoveryEvent(java.lang.String remoteAddr) throws org.apache.thrift.TException
    {
      send_serviceDiscoveryEvent(remoteAddr);
      recv_serviceDiscoveryEvent();
    }

    public void send_serviceDiscoveryEvent(java.lang.String remoteAddr) throws org.apache.thrift.TException
    {
      serviceDiscoveryEvent_args args = new serviceDiscoveryEvent_args();
      args.setRemoteAddr(remoteAddr);
      sendBase("serviceDiscoveryEvent", args);
    }

    public void recv_serviceDiscoveryEvent() throws org.apache.thrift.TException
    {
      serviceDiscoveryEvent_result result = new serviceDiscoveryEvent_result();
      receiveBase(result, "serviceDiscoveryEvent");
      return;
    }

    public void servicePricesEvent(java.lang.String remoteAddr, int serviceId) throws org.apache.thrift.TException
    {
      send_servicePricesEvent(remoteAddr, serviceId);
      recv_servicePricesEvent();
    }

    public void send_servicePricesEvent(java.lang.String remoteAddr, int serviceId) throws org.apache.thrift.TException
    {
      servicePricesEvent_args args = new servicePricesEvent_args();
      args.setRemoteAddr(remoteAddr);
      args.setServiceId(serviceId);
      sendBase("servicePricesEvent", args);
    }

    public void recv_servicePricesEvent() throws org.apache.thrift.TException
    {
      servicePricesEvent_result result = new servicePricesEvent_result();
      receiveBase(result, "servicePricesEvent");
      return;
    }

    public void serviceTotalPriceEvent(java.lang.String remoteAddr, int serviceID, com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp) throws org.apache.thrift.TException
    {
      send_serviceTotalPriceEvent(remoteAddr, serviceID, totalPriceResp);
      recv_serviceTotalPriceEvent();
    }

    public void send_serviceTotalPriceEvent(java.lang.String remoteAddr, int serviceID, com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp) throws org.apache.thrift.TException
    {
      serviceTotalPriceEvent_args args = new serviceTotalPriceEvent_args();
      args.setRemoteAddr(remoteAddr);
      args.setServiceID(serviceID);
      args.setTotalPriceResp(totalPriceResp);
      sendBase("serviceTotalPriceEvent", args);
    }

    public void recv_serviceTotalPriceEvent() throws org.apache.thrift.TException
    {
      serviceTotalPriceEvent_result result = new serviceTotalPriceEvent_result();
      receiveBase(result, "serviceTotalPriceEvent");
      return;
    }

    public void errorEvent(java.lang.String msg) throws org.apache.thrift.TException
    {
      send_errorEvent(msg);
      recv_errorEvent();
    }

    public void send_errorEvent(java.lang.String msg) throws org.apache.thrift.TException
    {
      errorEvent_args args = new errorEvent_args();
      args.setMsg(msg);
      sendBase("errorEvent", args);
    }

    public void recv_errorEvent() throws org.apache.thrift.TException
    {
      errorEvent_result result = new errorEvent_result();
      receiveBase(result, "errorEvent");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void beginServiceDelivery(int serviceID, int servicePriceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsToSupply, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginServiceDelivery_call method_call = new beginServiceDelivery_call(serviceID, servicePriceID, serviceDeliveryToken, unitsToSupply, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginServiceDelivery_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int serviceID;
      private int servicePriceID;
      private com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken;
      private int unitsToSupply;
      public beginServiceDelivery_call(int serviceID, int servicePriceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsToSupply, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceID = serviceID;
        this.servicePriceID = servicePriceID;
        this.serviceDeliveryToken = serviceDeliveryToken;
        this.unitsToSupply = unitsToSupply;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginServiceDelivery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginServiceDelivery_args args = new beginServiceDelivery_args();
        args.setServiceID(serviceID);
        args.setServicePriceID(servicePriceID);
        args.setServiceDeliveryToken(serviceDeliveryToken);
        args.setUnitsToSupply(unitsToSupply);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void endServiceDelivery(int serviceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsReceived, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      endServiceDelivery_call method_call = new endServiceDelivery_call(serviceID, serviceDeliveryToken, unitsReceived, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class endServiceDelivery_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int serviceID;
      private com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken;
      private int unitsReceived;
      public endServiceDelivery_call(int serviceID, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken, int unitsReceived, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serviceID = serviceID;
        this.serviceDeliveryToken = serviceDeliveryToken;
        this.unitsReceived = unitsReceived;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("endServiceDelivery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        endServiceDelivery_args args = new endServiceDelivery_args();
        args.setServiceID(serviceID);
        args.setServiceDeliveryToken(serviceDeliveryToken);
        args.setUnitsReceived(unitsReceived);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws com.worldpay.innovation.wpwithin.rpc.types.Error, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void makePaymentEvent(int totalPrice, java.lang.String orderCurrency, java.lang.String clientToken, java.lang.String orderDescription, java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      makePaymentEvent_call method_call = new makePaymentEvent_call(totalPrice, orderCurrency, clientToken, orderDescription, uuid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class makePaymentEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int totalPrice;
      private java.lang.String orderCurrency;
      private java.lang.String clientToken;
      private java.lang.String orderDescription;
      private java.lang.String uuid;
      public makePaymentEvent_call(int totalPrice, java.lang.String orderCurrency, java.lang.String clientToken, java.lang.String orderDescription, java.lang.String uuid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.totalPrice = totalPrice;
        this.orderCurrency = orderCurrency;
        this.clientToken = clientToken;
        this.orderDescription = orderDescription;
        this.uuid = uuid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("makePaymentEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        makePaymentEvent_args args = new makePaymentEvent_args();
        args.setTotalPrice(totalPrice);
        args.setOrderCurrency(orderCurrency);
        args.setClientToken(clientToken);
        args.setOrderDescription(orderDescription);
        args.setUuid(uuid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void serviceDiscoveryEvent(java.lang.String remoteAddr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      serviceDiscoveryEvent_call method_call = new serviceDiscoveryEvent_call(remoteAddr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class serviceDiscoveryEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String remoteAddr;
      public serviceDiscoveryEvent_call(java.lang.String remoteAddr, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.remoteAddr = remoteAddr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("serviceDiscoveryEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        serviceDiscoveryEvent_args args = new serviceDiscoveryEvent_args();
        args.setRemoteAddr(remoteAddr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void servicePricesEvent(java.lang.String remoteAddr, int serviceId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      servicePricesEvent_call method_call = new servicePricesEvent_call(remoteAddr, serviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class servicePricesEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String remoteAddr;
      private int serviceId;
      public servicePricesEvent_call(java.lang.String remoteAddr, int serviceId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.remoteAddr = remoteAddr;
        this.serviceId = serviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("servicePricesEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        servicePricesEvent_args args = new servicePricesEvent_args();
        args.setRemoteAddr(remoteAddr);
        args.setServiceId(serviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void serviceTotalPriceEvent(java.lang.String remoteAddr, int serviceID, com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      serviceTotalPriceEvent_call method_call = new serviceTotalPriceEvent_call(remoteAddr, serviceID, totalPriceResp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class serviceTotalPriceEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String remoteAddr;
      private int serviceID;
      private com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp;
      public serviceTotalPriceEvent_call(java.lang.String remoteAddr, int serviceID, com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.remoteAddr = remoteAddr;
        this.serviceID = serviceID;
        this.totalPriceResp = totalPriceResp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("serviceTotalPriceEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        serviceTotalPriceEvent_args args = new serviceTotalPriceEvent_args();
        args.setRemoteAddr(remoteAddr);
        args.setServiceID(serviceID);
        args.setTotalPriceResp(totalPriceResp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void errorEvent(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      errorEvent_call method_call = new errorEvent_call(msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class errorEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String msg;
      public errorEvent_call(java.lang.String msg, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("errorEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        errorEvent_args args = new errorEvent_args();
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("beginServiceDelivery", new beginServiceDelivery());
      processMap.put("endServiceDelivery", new endServiceDelivery());
      processMap.put("makePaymentEvent", new makePaymentEvent());
      processMap.put("serviceDiscoveryEvent", new serviceDiscoveryEvent());
      processMap.put("servicePricesEvent", new servicePricesEvent());
      processMap.put("serviceTotalPriceEvent", new serviceTotalPriceEvent());
      processMap.put("errorEvent", new errorEvent());
      return processMap;
    }

    public static class beginServiceDelivery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginServiceDelivery_args> {
      public beginServiceDelivery() {
        super("beginServiceDelivery");
      }

      public beginServiceDelivery_args getEmptyArgsInstance() {
        return new beginServiceDelivery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginServiceDelivery_result getResult(I iface, beginServiceDelivery_args args) throws org.apache.thrift.TException {
        beginServiceDelivery_result result = new beginServiceDelivery_result();
        try {
          iface.beginServiceDelivery(args.serviceID, args.servicePriceID, args.serviceDeliveryToken, args.unitsToSupply);
        } catch (com.worldpay.innovation.wpwithin.rpc.types.Error err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class endServiceDelivery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, endServiceDelivery_args> {
      public endServiceDelivery() {
        super("endServiceDelivery");
      }

      public endServiceDelivery_args getEmptyArgsInstance() {
        return new endServiceDelivery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public endServiceDelivery_result getResult(I iface, endServiceDelivery_args args) throws org.apache.thrift.TException {
        endServiceDelivery_result result = new endServiceDelivery_result();
        try {
          iface.endServiceDelivery(args.serviceID, args.serviceDeliveryToken, args.unitsReceived);
        } catch (com.worldpay.innovation.wpwithin.rpc.types.Error err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class makePaymentEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, makePaymentEvent_args> {
      public makePaymentEvent() {
        super("makePaymentEvent");
      }

      public makePaymentEvent_args getEmptyArgsInstance() {
        return new makePaymentEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public makePaymentEvent_result getResult(I iface, makePaymentEvent_args args) throws org.apache.thrift.TException {
        makePaymentEvent_result result = new makePaymentEvent_result();
        iface.makePaymentEvent(args.totalPrice, args.orderCurrency, args.clientToken, args.orderDescription, args.uuid);
        return result;
      }
    }

    public static class serviceDiscoveryEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, serviceDiscoveryEvent_args> {
      public serviceDiscoveryEvent() {
        super("serviceDiscoveryEvent");
      }

      public serviceDiscoveryEvent_args getEmptyArgsInstance() {
        return new serviceDiscoveryEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public serviceDiscoveryEvent_result getResult(I iface, serviceDiscoveryEvent_args args) throws org.apache.thrift.TException {
        serviceDiscoveryEvent_result result = new serviceDiscoveryEvent_result();
        iface.serviceDiscoveryEvent(args.remoteAddr);
        return result;
      }
    }

    public static class servicePricesEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, servicePricesEvent_args> {
      public servicePricesEvent() {
        super("servicePricesEvent");
      }

      public servicePricesEvent_args getEmptyArgsInstance() {
        return new servicePricesEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public servicePricesEvent_result getResult(I iface, servicePricesEvent_args args) throws org.apache.thrift.TException {
        servicePricesEvent_result result = new servicePricesEvent_result();
        iface.servicePricesEvent(args.remoteAddr, args.serviceId);
        return result;
      }
    }

    public static class serviceTotalPriceEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, serviceTotalPriceEvent_args> {
      public serviceTotalPriceEvent() {
        super("serviceTotalPriceEvent");
      }

      public serviceTotalPriceEvent_args getEmptyArgsInstance() {
        return new serviceTotalPriceEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public serviceTotalPriceEvent_result getResult(I iface, serviceTotalPriceEvent_args args) throws org.apache.thrift.TException {
        serviceTotalPriceEvent_result result = new serviceTotalPriceEvent_result();
        iface.serviceTotalPriceEvent(args.remoteAddr, args.serviceID, args.totalPriceResp);
        return result;
      }
    }

    public static class errorEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, errorEvent_args> {
      public errorEvent() {
        super("errorEvent");
      }

      public errorEvent_args getEmptyArgsInstance() {
        return new errorEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public errorEvent_result getResult(I iface, errorEvent_args args) throws org.apache.thrift.TException {
        errorEvent_result result = new errorEvent_result();
        iface.errorEvent(args.msg);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("beginServiceDelivery", new beginServiceDelivery());
      processMap.put("endServiceDelivery", new endServiceDelivery());
      processMap.put("makePaymentEvent", new makePaymentEvent());
      processMap.put("serviceDiscoveryEvent", new serviceDiscoveryEvent());
      processMap.put("servicePricesEvent", new servicePricesEvent());
      processMap.put("serviceTotalPriceEvent", new serviceTotalPriceEvent());
      processMap.put("errorEvent", new errorEvent());
      return processMap;
    }

    public static class beginServiceDelivery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginServiceDelivery_args, Void> {
      public beginServiceDelivery() {
        super("beginServiceDelivery");
      }

      public beginServiceDelivery_args getEmptyArgsInstance() {
        return new beginServiceDelivery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            beginServiceDelivery_result result = new beginServiceDelivery_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            beginServiceDelivery_result result = new beginServiceDelivery_result();
            if (e instanceof com.worldpay.innovation.wpwithin.rpc.types.Error) {
              result.err = (com.worldpay.innovation.wpwithin.rpc.types.Error) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginServiceDelivery_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.beginServiceDelivery(args.serviceID, args.servicePriceID, args.serviceDeliveryToken, args.unitsToSupply,resultHandler);
      }
    }

    public static class endServiceDelivery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, endServiceDelivery_args, Void> {
      public endServiceDelivery() {
        super("endServiceDelivery");
      }

      public endServiceDelivery_args getEmptyArgsInstance() {
        return new endServiceDelivery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            endServiceDelivery_result result = new endServiceDelivery_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            endServiceDelivery_result result = new endServiceDelivery_result();
            if (e instanceof com.worldpay.innovation.wpwithin.rpc.types.Error) {
              result.err = (com.worldpay.innovation.wpwithin.rpc.types.Error) e;
              result.setErrIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, endServiceDelivery_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.endServiceDelivery(args.serviceID, args.serviceDeliveryToken, args.unitsReceived,resultHandler);
      }
    }

    public static class makePaymentEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, makePaymentEvent_args, Void> {
      public makePaymentEvent() {
        super("makePaymentEvent");
      }

      public makePaymentEvent_args getEmptyArgsInstance() {
        return new makePaymentEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            makePaymentEvent_result result = new makePaymentEvent_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            makePaymentEvent_result result = new makePaymentEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, makePaymentEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.makePaymentEvent(args.totalPrice, args.orderCurrency, args.clientToken, args.orderDescription, args.uuid,resultHandler);
      }
    }

    public static class serviceDiscoveryEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, serviceDiscoveryEvent_args, Void> {
      public serviceDiscoveryEvent() {
        super("serviceDiscoveryEvent");
      }

      public serviceDiscoveryEvent_args getEmptyArgsInstance() {
        return new serviceDiscoveryEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            serviceDiscoveryEvent_result result = new serviceDiscoveryEvent_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            serviceDiscoveryEvent_result result = new serviceDiscoveryEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, serviceDiscoveryEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.serviceDiscoveryEvent(args.remoteAddr,resultHandler);
      }
    }

    public static class servicePricesEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, servicePricesEvent_args, Void> {
      public servicePricesEvent() {
        super("servicePricesEvent");
      }

      public servicePricesEvent_args getEmptyArgsInstance() {
        return new servicePricesEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            servicePricesEvent_result result = new servicePricesEvent_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            servicePricesEvent_result result = new servicePricesEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, servicePricesEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.servicePricesEvent(args.remoteAddr, args.serviceId,resultHandler);
      }
    }

    public static class serviceTotalPriceEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, serviceTotalPriceEvent_args, Void> {
      public serviceTotalPriceEvent() {
        super("serviceTotalPriceEvent");
      }

      public serviceTotalPriceEvent_args getEmptyArgsInstance() {
        return new serviceTotalPriceEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            serviceTotalPriceEvent_result result = new serviceTotalPriceEvent_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            serviceTotalPriceEvent_result result = new serviceTotalPriceEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, serviceTotalPriceEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.serviceTotalPriceEvent(args.remoteAddr, args.serviceID, args.totalPriceResp,resultHandler);
      }
    }

    public static class errorEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, errorEvent_args, Void> {
      public errorEvent() {
        super("errorEvent");
      }

      public errorEvent_args getEmptyArgsInstance() {
        return new errorEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            errorEvent_result result = new errorEvent_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            errorEvent_result result = new errorEvent_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, errorEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.errorEvent(args.msg,resultHandler);
      }
    }

  }

  public static class beginServiceDelivery_args implements org.apache.thrift.TBase<beginServiceDelivery_args, beginServiceDelivery_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginServiceDelivery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginServiceDelivery_args");

    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_PRICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("servicePriceID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SERVICE_DELIVERY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceDeliveryToken", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField UNITS_TO_SUPPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("unitsToSupply", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new beginServiceDelivery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new beginServiceDelivery_argsTupleSchemeFactory();

    public int serviceID; // required
    public int servicePriceID; // required
    public com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken; // required
    public int unitsToSupply; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_ID((short)1, "serviceID"),
      SERVICE_PRICE_ID((short)2, "servicePriceID"),
      SERVICE_DELIVERY_TOKEN((short)3, "serviceDeliveryToken"),
      UNITS_TO_SUPPLY((short)4, "unitsToSupply");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_ID
            return SERVICE_ID;
          case 2: // SERVICE_PRICE_ID
            return SERVICE_PRICE_ID;
          case 3: // SERVICE_DELIVERY_TOKEN
            return SERVICE_DELIVERY_TOKEN;
          case 4: // UNITS_TO_SUPPLY
            return UNITS_TO_SUPPLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVICEID_ISSET_ID = 0;
    private static final int __SERVICEPRICEID_ISSET_ID = 1;
    private static final int __UNITSTOSUPPLY_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SERVICE_PRICE_ID, new org.apache.thrift.meta_data.FieldMetaData("servicePriceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SERVICE_DELIVERY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("serviceDeliveryToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken.class)));
      tmpMap.put(_Fields.UNITS_TO_SUPPLY, new org.apache.thrift.meta_data.FieldMetaData("unitsToSupply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginServiceDelivery_args.class, metaDataMap);
    }

    public beginServiceDelivery_args() {
    }

    public beginServiceDelivery_args(
      int serviceID,
      int servicePriceID,
      com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken,
      int unitsToSupply)
    {
      this();
      this.serviceID = serviceID;
      setServiceIDIsSet(true);
      this.servicePriceID = servicePriceID;
      setServicePriceIDIsSet(true);
      this.serviceDeliveryToken = serviceDeliveryToken;
      this.unitsToSupply = unitsToSupply;
      setUnitsToSupplyIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginServiceDelivery_args(beginServiceDelivery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serviceID = other.serviceID;
      this.servicePriceID = other.servicePriceID;
      if (other.isSetServiceDeliveryToken()) {
        this.serviceDeliveryToken = new com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken(other.serviceDeliveryToken);
      }
      this.unitsToSupply = other.unitsToSupply;
    }

    public beginServiceDelivery_args deepCopy() {
      return new beginServiceDelivery_args(this);
    }

    @Override
    public void clear() {
      setServiceIDIsSet(false);
      this.serviceID = 0;
      setServicePriceIDIsSet(false);
      this.servicePriceID = 0;
      this.serviceDeliveryToken = null;
      setUnitsToSupplyIsSet(false);
      this.unitsToSupply = 0;
    }

    public int getServiceID() {
      return this.serviceID;
    }

    public beginServiceDelivery_args setServiceID(int serviceID) {
      this.serviceID = serviceID;
      setServiceIDIsSet(true);
      return this;
    }

    public void unsetServiceID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    /** Returns true if field serviceID is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    public void setServiceIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICEID_ISSET_ID, value);
    }

    public int getServicePriceID() {
      return this.servicePriceID;
    }

    public beginServiceDelivery_args setServicePriceID(int servicePriceID) {
      this.servicePriceID = servicePriceID;
      setServicePriceIDIsSet(true);
      return this;
    }

    public void unsetServicePriceID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICEPRICEID_ISSET_ID);
    }

    /** Returns true if field servicePriceID is set (has been assigned a value) and false otherwise */
    public boolean isSetServicePriceID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICEPRICEID_ISSET_ID);
    }

    public void setServicePriceIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICEPRICEID_ISSET_ID, value);
    }

    public com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken getServiceDeliveryToken() {
      return this.serviceDeliveryToken;
    }

    public beginServiceDelivery_args setServiceDeliveryToken(com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken) {
      this.serviceDeliveryToken = serviceDeliveryToken;
      return this;
    }

    public void unsetServiceDeliveryToken() {
      this.serviceDeliveryToken = null;
    }

    /** Returns true if field serviceDeliveryToken is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceDeliveryToken() {
      return this.serviceDeliveryToken != null;
    }

    public void setServiceDeliveryTokenIsSet(boolean value) {
      if (!value) {
        this.serviceDeliveryToken = null;
      }
    }

    public int getUnitsToSupply() {
      return this.unitsToSupply;
    }

    public beginServiceDelivery_args setUnitsToSupply(int unitsToSupply) {
      this.unitsToSupply = unitsToSupply;
      setUnitsToSupplyIsSet(true);
      return this;
    }

    public void unsetUnitsToSupply() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNITSTOSUPPLY_ISSET_ID);
    }

    /** Returns true if field unitsToSupply is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitsToSupply() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNITSTOSUPPLY_ISSET_ID);
    }

    public void setUnitsToSupplyIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNITSTOSUPPLY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVICE_ID:
        if (value == null) {
          unsetServiceID();
        } else {
          setServiceID((java.lang.Integer)value);
        }
        break;

      case SERVICE_PRICE_ID:
        if (value == null) {
          unsetServicePriceID();
        } else {
          setServicePriceID((java.lang.Integer)value);
        }
        break;

      case SERVICE_DELIVERY_TOKEN:
        if (value == null) {
          unsetServiceDeliveryToken();
        } else {
          setServiceDeliveryToken((com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken)value);
        }
        break;

      case UNITS_TO_SUPPLY:
        if (value == null) {
          unsetUnitsToSupply();
        } else {
          setUnitsToSupply((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_ID:
        return getServiceID();

      case SERVICE_PRICE_ID:
        return getServicePriceID();

      case SERVICE_DELIVERY_TOKEN:
        return getServiceDeliveryToken();

      case UNITS_TO_SUPPLY:
        return getUnitsToSupply();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_ID:
        return isSetServiceID();
      case SERVICE_PRICE_ID:
        return isSetServicePriceID();
      case SERVICE_DELIVERY_TOKEN:
        return isSetServiceDeliveryToken();
      case UNITS_TO_SUPPLY:
        return isSetUnitsToSupply();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof beginServiceDelivery_args)
        return this.equals((beginServiceDelivery_args)that);
      return false;
    }

    public boolean equals(beginServiceDelivery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serviceID = true;
      boolean that_present_serviceID = true;
      if (this_present_serviceID || that_present_serviceID) {
        if (!(this_present_serviceID && that_present_serviceID))
          return false;
        if (this.serviceID != that.serviceID)
          return false;
      }

      boolean this_present_servicePriceID = true;
      boolean that_present_servicePriceID = true;
      if (this_present_servicePriceID || that_present_servicePriceID) {
        if (!(this_present_servicePriceID && that_present_servicePriceID))
          return false;
        if (this.servicePriceID != that.servicePriceID)
          return false;
      }

      boolean this_present_serviceDeliveryToken = true && this.isSetServiceDeliveryToken();
      boolean that_present_serviceDeliveryToken = true && that.isSetServiceDeliveryToken();
      if (this_present_serviceDeliveryToken || that_present_serviceDeliveryToken) {
        if (!(this_present_serviceDeliveryToken && that_present_serviceDeliveryToken))
          return false;
        if (!this.serviceDeliveryToken.equals(that.serviceDeliveryToken))
          return false;
      }

      boolean this_present_unitsToSupply = true;
      boolean that_present_unitsToSupply = true;
      if (this_present_unitsToSupply || that_present_unitsToSupply) {
        if (!(this_present_unitsToSupply && that_present_unitsToSupply))
          return false;
        if (this.unitsToSupply != that.unitsToSupply)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + serviceID;

      hashCode = hashCode * 8191 + servicePriceID;

      hashCode = hashCode * 8191 + ((isSetServiceDeliveryToken()) ? 131071 : 524287);
      if (isSetServiceDeliveryToken())
        hashCode = hashCode * 8191 + serviceDeliveryToken.hashCode();

      hashCode = hashCode * 8191 + unitsToSupply;

      return hashCode;
    }

    @Override
    public int compareTo(beginServiceDelivery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServiceID()).compareTo(other.isSetServiceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceID, other.serviceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServicePriceID()).compareTo(other.isSetServicePriceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServicePriceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.servicePriceID, other.servicePriceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServiceDeliveryToken()).compareTo(other.isSetServiceDeliveryToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceDeliveryToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceDeliveryToken, other.serviceDeliveryToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnitsToSupply()).compareTo(other.isSetUnitsToSupply());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitsToSupply()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitsToSupply, other.unitsToSupply);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("beginServiceDelivery_args(");
      boolean first = true;

      sb.append("serviceID:");
      sb.append(this.serviceID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("servicePriceID:");
      sb.append(this.servicePriceID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceDeliveryToken:");
      if (this.serviceDeliveryToken == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceDeliveryToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitsToSupply:");
      sb.append(this.unitsToSupply);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serviceDeliveryToken != null) {
        serviceDeliveryToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginServiceDelivery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public beginServiceDelivery_argsStandardScheme getScheme() {
        return new beginServiceDelivery_argsStandardScheme();
      }
    }

    private static class beginServiceDelivery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<beginServiceDelivery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginServiceDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serviceID = iprot.readI32();
                struct.setServiceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_PRICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.servicePriceID = iprot.readI32();
                struct.setServicePriceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVICE_DELIVERY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceDeliveryToken = new com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken();
                struct.serviceDeliveryToken.read(iprot);
                struct.setServiceDeliveryTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // UNITS_TO_SUPPLY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.unitsToSupply = iprot.readI32();
                struct.setUnitsToSupplyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginServiceDelivery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeI32(struct.serviceID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SERVICE_PRICE_ID_FIELD_DESC);
        oprot.writeI32(struct.servicePriceID);
        oprot.writeFieldEnd();
        if (struct.serviceDeliveryToken != null) {
          oprot.writeFieldBegin(SERVICE_DELIVERY_TOKEN_FIELD_DESC);
          struct.serviceDeliveryToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UNITS_TO_SUPPLY_FIELD_DESC);
        oprot.writeI32(struct.unitsToSupply);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginServiceDelivery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public beginServiceDelivery_argsTupleScheme getScheme() {
        return new beginServiceDelivery_argsTupleScheme();
      }
    }

    private static class beginServiceDelivery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<beginServiceDelivery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginServiceDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServiceID()) {
          optionals.set(0);
        }
        if (struct.isSetServicePriceID()) {
          optionals.set(1);
        }
        if (struct.isSetServiceDeliveryToken()) {
          optionals.set(2);
        }
        if (struct.isSetUnitsToSupply()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetServiceID()) {
          oprot.writeI32(struct.serviceID);
        }
        if (struct.isSetServicePriceID()) {
          oprot.writeI32(struct.servicePriceID);
        }
        if (struct.isSetServiceDeliveryToken()) {
          struct.serviceDeliveryToken.write(oprot);
        }
        if (struct.isSetUnitsToSupply()) {
          oprot.writeI32(struct.unitsToSupply);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginServiceDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.serviceID = iprot.readI32();
          struct.setServiceIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.servicePriceID = iprot.readI32();
          struct.setServicePriceIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serviceDeliveryToken = new com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken();
          struct.serviceDeliveryToken.read(iprot);
          struct.setServiceDeliveryTokenIsSet(true);
        }
        if (incoming.get(3)) {
          struct.unitsToSupply = iprot.readI32();
          struct.setUnitsToSupplyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class beginServiceDelivery_result implements org.apache.thrift.TBase<beginServiceDelivery_result, beginServiceDelivery_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginServiceDelivery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginServiceDelivery_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new beginServiceDelivery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new beginServiceDelivery_resultTupleSchemeFactory();

    public com.worldpay.innovation.wpwithin.rpc.types.Error err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.worldpay.innovation.wpwithin.rpc.types.Error.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginServiceDelivery_result.class, metaDataMap);
    }

    public beginServiceDelivery_result() {
    }

    public beginServiceDelivery_result(
      com.worldpay.innovation.wpwithin.rpc.types.Error err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginServiceDelivery_result(beginServiceDelivery_result other) {
      if (other.isSetErr()) {
        this.err = new com.worldpay.innovation.wpwithin.rpc.types.Error(other.err);
      }
    }

    public beginServiceDelivery_result deepCopy() {
      return new beginServiceDelivery_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.worldpay.innovation.wpwithin.rpc.types.Error getErr() {
      return this.err;
    }

    public beginServiceDelivery_result setErr(com.worldpay.innovation.wpwithin.rpc.types.Error err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.worldpay.innovation.wpwithin.rpc.types.Error)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof beginServiceDelivery_result)
        return this.equals((beginServiceDelivery_result)that);
      return false;
    }

    public boolean equals(beginServiceDelivery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(beginServiceDelivery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("beginServiceDelivery_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginServiceDelivery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public beginServiceDelivery_resultStandardScheme getScheme() {
        return new beginServiceDelivery_resultStandardScheme();
      }
    }

    private static class beginServiceDelivery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<beginServiceDelivery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginServiceDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.worldpay.innovation.wpwithin.rpc.types.Error();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginServiceDelivery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginServiceDelivery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public beginServiceDelivery_resultTupleScheme getScheme() {
        return new beginServiceDelivery_resultTupleScheme();
      }
    }

    private static class beginServiceDelivery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<beginServiceDelivery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginServiceDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginServiceDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new com.worldpay.innovation.wpwithin.rpc.types.Error();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class endServiceDelivery_args implements org.apache.thrift.TBase<endServiceDelivery_args, endServiceDelivery_args._Fields>, java.io.Serializable, Cloneable, Comparable<endServiceDelivery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endServiceDelivery_args");

    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_DELIVERY_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceDeliveryToken", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField UNITS_RECEIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("unitsReceived", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new endServiceDelivery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new endServiceDelivery_argsTupleSchemeFactory();

    public int serviceID; // required
    public com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken; // required
    public int unitsReceived; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVICE_ID((short)1, "serviceID"),
      SERVICE_DELIVERY_TOKEN((short)2, "serviceDeliveryToken"),
      UNITS_RECEIVED((short)3, "unitsReceived");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVICE_ID
            return SERVICE_ID;
          case 2: // SERVICE_DELIVERY_TOKEN
            return SERVICE_DELIVERY_TOKEN;
          case 3: // UNITS_RECEIVED
            return UNITS_RECEIVED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVICEID_ISSET_ID = 0;
    private static final int __UNITSRECEIVED_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SERVICE_DELIVERY_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("serviceDeliveryToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken.class)));
      tmpMap.put(_Fields.UNITS_RECEIVED, new org.apache.thrift.meta_data.FieldMetaData("unitsReceived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endServiceDelivery_args.class, metaDataMap);
    }

    public endServiceDelivery_args() {
    }

    public endServiceDelivery_args(
      int serviceID,
      com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken,
      int unitsReceived)
    {
      this();
      this.serviceID = serviceID;
      setServiceIDIsSet(true);
      this.serviceDeliveryToken = serviceDeliveryToken;
      this.unitsReceived = unitsReceived;
      setUnitsReceivedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endServiceDelivery_args(endServiceDelivery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.serviceID = other.serviceID;
      if (other.isSetServiceDeliveryToken()) {
        this.serviceDeliveryToken = new com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken(other.serviceDeliveryToken);
      }
      this.unitsReceived = other.unitsReceived;
    }

    public endServiceDelivery_args deepCopy() {
      return new endServiceDelivery_args(this);
    }

    @Override
    public void clear() {
      setServiceIDIsSet(false);
      this.serviceID = 0;
      this.serviceDeliveryToken = null;
      setUnitsReceivedIsSet(false);
      this.unitsReceived = 0;
    }

    public int getServiceID() {
      return this.serviceID;
    }

    public endServiceDelivery_args setServiceID(int serviceID) {
      this.serviceID = serviceID;
      setServiceIDIsSet(true);
      return this;
    }

    public void unsetServiceID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    /** Returns true if field serviceID is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    public void setServiceIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICEID_ISSET_ID, value);
    }

    public com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken getServiceDeliveryToken() {
      return this.serviceDeliveryToken;
    }

    public endServiceDelivery_args setServiceDeliveryToken(com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken serviceDeliveryToken) {
      this.serviceDeliveryToken = serviceDeliveryToken;
      return this;
    }

    public void unsetServiceDeliveryToken() {
      this.serviceDeliveryToken = null;
    }

    /** Returns true if field serviceDeliveryToken is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceDeliveryToken() {
      return this.serviceDeliveryToken != null;
    }

    public void setServiceDeliveryTokenIsSet(boolean value) {
      if (!value) {
        this.serviceDeliveryToken = null;
      }
    }

    public int getUnitsReceived() {
      return this.unitsReceived;
    }

    public endServiceDelivery_args setUnitsReceived(int unitsReceived) {
      this.unitsReceived = unitsReceived;
      setUnitsReceivedIsSet(true);
      return this;
    }

    public void unsetUnitsReceived() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNITSRECEIVED_ISSET_ID);
    }

    /** Returns true if field unitsReceived is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitsReceived() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNITSRECEIVED_ISSET_ID);
    }

    public void setUnitsReceivedIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNITSRECEIVED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SERVICE_ID:
        if (value == null) {
          unsetServiceID();
        } else {
          setServiceID((java.lang.Integer)value);
        }
        break;

      case SERVICE_DELIVERY_TOKEN:
        if (value == null) {
          unsetServiceDeliveryToken();
        } else {
          setServiceDeliveryToken((com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken)value);
        }
        break;

      case UNITS_RECEIVED:
        if (value == null) {
          unsetUnitsReceived();
        } else {
          setUnitsReceived((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVICE_ID:
        return getServiceID();

      case SERVICE_DELIVERY_TOKEN:
        return getServiceDeliveryToken();

      case UNITS_RECEIVED:
        return getUnitsReceived();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SERVICE_ID:
        return isSetServiceID();
      case SERVICE_DELIVERY_TOKEN:
        return isSetServiceDeliveryToken();
      case UNITS_RECEIVED:
        return isSetUnitsReceived();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof endServiceDelivery_args)
        return this.equals((endServiceDelivery_args)that);
      return false;
    }

    public boolean equals(endServiceDelivery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serviceID = true;
      boolean that_present_serviceID = true;
      if (this_present_serviceID || that_present_serviceID) {
        if (!(this_present_serviceID && that_present_serviceID))
          return false;
        if (this.serviceID != that.serviceID)
          return false;
      }

      boolean this_present_serviceDeliveryToken = true && this.isSetServiceDeliveryToken();
      boolean that_present_serviceDeliveryToken = true && that.isSetServiceDeliveryToken();
      if (this_present_serviceDeliveryToken || that_present_serviceDeliveryToken) {
        if (!(this_present_serviceDeliveryToken && that_present_serviceDeliveryToken))
          return false;
        if (!this.serviceDeliveryToken.equals(that.serviceDeliveryToken))
          return false;
      }

      boolean this_present_unitsReceived = true;
      boolean that_present_unitsReceived = true;
      if (this_present_unitsReceived || that_present_unitsReceived) {
        if (!(this_present_unitsReceived && that_present_unitsReceived))
          return false;
        if (this.unitsReceived != that.unitsReceived)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + serviceID;

      hashCode = hashCode * 8191 + ((isSetServiceDeliveryToken()) ? 131071 : 524287);
      if (isSetServiceDeliveryToken())
        hashCode = hashCode * 8191 + serviceDeliveryToken.hashCode();

      hashCode = hashCode * 8191 + unitsReceived;

      return hashCode;
    }

    @Override
    public int compareTo(endServiceDelivery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetServiceID()).compareTo(other.isSetServiceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceID, other.serviceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServiceDeliveryToken()).compareTo(other.isSetServiceDeliveryToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceDeliveryToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceDeliveryToken, other.serviceDeliveryToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUnitsReceived()).compareTo(other.isSetUnitsReceived());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitsReceived()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitsReceived, other.unitsReceived);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("endServiceDelivery_args(");
      boolean first = true;

      sb.append("serviceID:");
      sb.append(this.serviceID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceDeliveryToken:");
      if (this.serviceDeliveryToken == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceDeliveryToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitsReceived:");
      sb.append(this.unitsReceived);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (serviceDeliveryToken != null) {
        serviceDeliveryToken.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endServiceDelivery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public endServiceDelivery_argsStandardScheme getScheme() {
        return new endServiceDelivery_argsStandardScheme();
      }
    }

    private static class endServiceDelivery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<endServiceDelivery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endServiceDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serviceID = iprot.readI32();
                struct.setServiceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_DELIVERY_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serviceDeliveryToken = new com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken();
                struct.serviceDeliveryToken.read(iprot);
                struct.setServiceDeliveryTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UNITS_RECEIVED
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.unitsReceived = iprot.readI32();
                struct.setUnitsReceivedIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endServiceDelivery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeI32(struct.serviceID);
        oprot.writeFieldEnd();
        if (struct.serviceDeliveryToken != null) {
          oprot.writeFieldBegin(SERVICE_DELIVERY_TOKEN_FIELD_DESC);
          struct.serviceDeliveryToken.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UNITS_RECEIVED_FIELD_DESC);
        oprot.writeI32(struct.unitsReceived);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class endServiceDelivery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public endServiceDelivery_argsTupleScheme getScheme() {
        return new endServiceDelivery_argsTupleScheme();
      }
    }

    private static class endServiceDelivery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<endServiceDelivery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endServiceDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetServiceID()) {
          optionals.set(0);
        }
        if (struct.isSetServiceDeliveryToken()) {
          optionals.set(1);
        }
        if (struct.isSetUnitsReceived()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServiceID()) {
          oprot.writeI32(struct.serviceID);
        }
        if (struct.isSetServiceDeliveryToken()) {
          struct.serviceDeliveryToken.write(oprot);
        }
        if (struct.isSetUnitsReceived()) {
          oprot.writeI32(struct.unitsReceived);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endServiceDelivery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serviceID = iprot.readI32();
          struct.setServiceIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceDeliveryToken = new com.worldpay.innovation.wpwithin.rpc.types.ServiceDeliveryToken();
          struct.serviceDeliveryToken.read(iprot);
          struct.setServiceDeliveryTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.unitsReceived = iprot.readI32();
          struct.setUnitsReceivedIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class endServiceDelivery_result implements org.apache.thrift.TBase<endServiceDelivery_result, endServiceDelivery_result._Fields>, java.io.Serializable, Cloneable, Comparable<endServiceDelivery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endServiceDelivery_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new endServiceDelivery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new endServiceDelivery_resultTupleSchemeFactory();

    public com.worldpay.innovation.wpwithin.rpc.types.Error err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.worldpay.innovation.wpwithin.rpc.types.Error.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endServiceDelivery_result.class, metaDataMap);
    }

    public endServiceDelivery_result() {
    }

    public endServiceDelivery_result(
      com.worldpay.innovation.wpwithin.rpc.types.Error err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endServiceDelivery_result(endServiceDelivery_result other) {
      if (other.isSetErr()) {
        this.err = new com.worldpay.innovation.wpwithin.rpc.types.Error(other.err);
      }
    }

    public endServiceDelivery_result deepCopy() {
      return new endServiceDelivery_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public com.worldpay.innovation.wpwithin.rpc.types.Error getErr() {
      return this.err;
    }

    public endServiceDelivery_result setErr(com.worldpay.innovation.wpwithin.rpc.types.Error err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((com.worldpay.innovation.wpwithin.rpc.types.Error)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof endServiceDelivery_result)
        return this.equals((endServiceDelivery_result)that);
      return false;
    }

    public boolean equals(endServiceDelivery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetErr()) ? 131071 : 524287);
      if (isSetErr())
        hashCode = hashCode * 8191 + err.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(endServiceDelivery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("endServiceDelivery_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endServiceDelivery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public endServiceDelivery_resultStandardScheme getScheme() {
        return new endServiceDelivery_resultStandardScheme();
      }
    }

    private static class endServiceDelivery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<endServiceDelivery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endServiceDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new com.worldpay.innovation.wpwithin.rpc.types.Error();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endServiceDelivery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class endServiceDelivery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public endServiceDelivery_resultTupleScheme getScheme() {
        return new endServiceDelivery_resultTupleScheme();
      }
    }

    private static class endServiceDelivery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<endServiceDelivery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endServiceDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endServiceDelivery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new com.worldpay.innovation.wpwithin.rpc.types.Error();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class makePaymentEvent_args implements org.apache.thrift.TBase<makePaymentEvent_args, makePaymentEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<makePaymentEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makePaymentEvent_args");

    private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCurrency", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("clientToken", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ORDER_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDescription", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new makePaymentEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new makePaymentEvent_argsTupleSchemeFactory();

    public int totalPrice; // required
    public java.lang.String orderCurrency; // required
    public java.lang.String clientToken; // required
    public java.lang.String orderDescription; // required
    public java.lang.String uuid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOTAL_PRICE((short)1, "totalPrice"),
      ORDER_CURRENCY((short)2, "orderCurrency"),
      CLIENT_TOKEN((short)3, "clientToken"),
      ORDER_DESCRIPTION((short)4, "orderDescription"),
      UUID((short)5, "uuid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOTAL_PRICE
            return TOTAL_PRICE;
          case 2: // ORDER_CURRENCY
            return ORDER_CURRENCY;
          case 3: // CLIENT_TOKEN
            return CLIENT_TOKEN;
          case 4: // ORDER_DESCRIPTION
            return ORDER_DESCRIPTION;
          case 5: // UUID
            return UUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALPRICE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ORDER_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("orderCurrency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("clientToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("orderDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makePaymentEvent_args.class, metaDataMap);
    }

    public makePaymentEvent_args() {
    }

    public makePaymentEvent_args(
      int totalPrice,
      java.lang.String orderCurrency,
      java.lang.String clientToken,
      java.lang.String orderDescription,
      java.lang.String uuid)
    {
      this();
      this.totalPrice = totalPrice;
      setTotalPriceIsSet(true);
      this.orderCurrency = orderCurrency;
      this.clientToken = clientToken;
      this.orderDescription = orderDescription;
      this.uuid = uuid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makePaymentEvent_args(makePaymentEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.totalPrice = other.totalPrice;
      if (other.isSetOrderCurrency()) {
        this.orderCurrency = other.orderCurrency;
      }
      if (other.isSetClientToken()) {
        this.clientToken = other.clientToken;
      }
      if (other.isSetOrderDescription()) {
        this.orderDescription = other.orderDescription;
      }
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
    }

    public makePaymentEvent_args deepCopy() {
      return new makePaymentEvent_args(this);
    }

    @Override
    public void clear() {
      setTotalPriceIsSet(false);
      this.totalPrice = 0;
      this.orderCurrency = null;
      this.clientToken = null;
      this.orderDescription = null;
      this.uuid = null;
    }

    public int getTotalPrice() {
      return this.totalPrice;
    }

    public makePaymentEvent_args setTotalPrice(int totalPrice) {
      this.totalPrice = totalPrice;
      setTotalPriceIsSet(true);
      return this;
    }

    public void unsetTotalPrice() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
    }

    /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalPrice() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
    }

    public void setTotalPriceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
    }

    public java.lang.String getOrderCurrency() {
      return this.orderCurrency;
    }

    public makePaymentEvent_args setOrderCurrency(java.lang.String orderCurrency) {
      this.orderCurrency = orderCurrency;
      return this;
    }

    public void unsetOrderCurrency() {
      this.orderCurrency = null;
    }

    /** Returns true if field orderCurrency is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderCurrency() {
      return this.orderCurrency != null;
    }

    public void setOrderCurrencyIsSet(boolean value) {
      if (!value) {
        this.orderCurrency = null;
      }
    }

    public java.lang.String getClientToken() {
      return this.clientToken;
    }

    public makePaymentEvent_args setClientToken(java.lang.String clientToken) {
      this.clientToken = clientToken;
      return this;
    }

    public void unsetClientToken() {
      this.clientToken = null;
    }

    /** Returns true if field clientToken is set (has been assigned a value) and false otherwise */
    public boolean isSetClientToken() {
      return this.clientToken != null;
    }

    public void setClientTokenIsSet(boolean value) {
      if (!value) {
        this.clientToken = null;
      }
    }

    public java.lang.String getOrderDescription() {
      return this.orderDescription;
    }

    public makePaymentEvent_args setOrderDescription(java.lang.String orderDescription) {
      this.orderDescription = orderDescription;
      return this;
    }

    public void unsetOrderDescription() {
      this.orderDescription = null;
    }

    /** Returns true if field orderDescription is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderDescription() {
      return this.orderDescription != null;
    }

    public void setOrderDescriptionIsSet(boolean value) {
      if (!value) {
        this.orderDescription = null;
      }
    }

    public java.lang.String getUuid() {
      return this.uuid;
    }

    public makePaymentEvent_args setUuid(java.lang.String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOTAL_PRICE:
        if (value == null) {
          unsetTotalPrice();
        } else {
          setTotalPrice((java.lang.Integer)value);
        }
        break;

      case ORDER_CURRENCY:
        if (value == null) {
          unsetOrderCurrency();
        } else {
          setOrderCurrency((java.lang.String)value);
        }
        break;

      case CLIENT_TOKEN:
        if (value == null) {
          unsetClientToken();
        } else {
          setClientToken((java.lang.String)value);
        }
        break;

      case ORDER_DESCRIPTION:
        if (value == null) {
          unsetOrderDescription();
        } else {
          setOrderDescription((java.lang.String)value);
        }
        break;

      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOTAL_PRICE:
        return getTotalPrice();

      case ORDER_CURRENCY:
        return getOrderCurrency();

      case CLIENT_TOKEN:
        return getClientToken();

      case ORDER_DESCRIPTION:
        return getOrderDescription();

      case UUID:
        return getUuid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOTAL_PRICE:
        return isSetTotalPrice();
      case ORDER_CURRENCY:
        return isSetOrderCurrency();
      case CLIENT_TOKEN:
        return isSetClientToken();
      case ORDER_DESCRIPTION:
        return isSetOrderDescription();
      case UUID:
        return isSetUuid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof makePaymentEvent_args)
        return this.equals((makePaymentEvent_args)that);
      return false;
    }

    public boolean equals(makePaymentEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_totalPrice = true;
      boolean that_present_totalPrice = true;
      if (this_present_totalPrice || that_present_totalPrice) {
        if (!(this_present_totalPrice && that_present_totalPrice))
          return false;
        if (this.totalPrice != that.totalPrice)
          return false;
      }

      boolean this_present_orderCurrency = true && this.isSetOrderCurrency();
      boolean that_present_orderCurrency = true && that.isSetOrderCurrency();
      if (this_present_orderCurrency || that_present_orderCurrency) {
        if (!(this_present_orderCurrency && that_present_orderCurrency))
          return false;
        if (!this.orderCurrency.equals(that.orderCurrency))
          return false;
      }

      boolean this_present_clientToken = true && this.isSetClientToken();
      boolean that_present_clientToken = true && that.isSetClientToken();
      if (this_present_clientToken || that_present_clientToken) {
        if (!(this_present_clientToken && that_present_clientToken))
          return false;
        if (!this.clientToken.equals(that.clientToken))
          return false;
      }

      boolean this_present_orderDescription = true && this.isSetOrderDescription();
      boolean that_present_orderDescription = true && that.isSetOrderDescription();
      if (this_present_orderDescription || that_present_orderDescription) {
        if (!(this_present_orderDescription && that_present_orderDescription))
          return false;
        if (!this.orderDescription.equals(that.orderDescription))
          return false;
      }

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + totalPrice;

      hashCode = hashCode * 8191 + ((isSetOrderCurrency()) ? 131071 : 524287);
      if (isSetOrderCurrency())
        hashCode = hashCode * 8191 + orderCurrency.hashCode();

      hashCode = hashCode * 8191 + ((isSetClientToken()) ? 131071 : 524287);
      if (isSetClientToken())
        hashCode = hashCode * 8191 + clientToken.hashCode();

      hashCode = hashCode * 8191 + ((isSetOrderDescription()) ? 131071 : 524287);
      if (isSetOrderDescription())
        hashCode = hashCode * 8191 + orderDescription.hashCode();

      hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
      if (isSetUuid())
        hashCode = hashCode * 8191 + uuid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(makePaymentEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalPrice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOrderCurrency()).compareTo(other.isSetOrderCurrency());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderCurrency()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCurrency, other.orderCurrency);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientToken()).compareTo(other.isSetClientToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientToken, other.clientToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOrderDescription()).compareTo(other.isSetOrderDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDescription, other.orderDescription);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("makePaymentEvent_args(");
      boolean first = true;

      sb.append("totalPrice:");
      sb.append(this.totalPrice);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderCurrency:");
      if (this.orderCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.orderCurrency);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientToken:");
      if (this.clientToken == null) {
        sb.append("null");
      } else {
        sb.append(this.clientToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderDescription:");
      if (this.orderDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.orderDescription);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makePaymentEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public makePaymentEvent_argsStandardScheme getScheme() {
        return new makePaymentEvent_argsStandardScheme();
      }
    }

    private static class makePaymentEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<makePaymentEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makePaymentEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOTAL_PRICE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.totalPrice = iprot.readI32();
                struct.setTotalPriceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_CURRENCY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderCurrency = iprot.readString();
                struct.setOrderCurrencyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientToken = iprot.readString();
                struct.setClientTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORDER_DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderDescription = iprot.readString();
                struct.setOrderDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makePaymentEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
        oprot.writeI32(struct.totalPrice);
        oprot.writeFieldEnd();
        if (struct.orderCurrency != null) {
          oprot.writeFieldBegin(ORDER_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.orderCurrency);
          oprot.writeFieldEnd();
        }
        if (struct.clientToken != null) {
          oprot.writeFieldBegin(CLIENT_TOKEN_FIELD_DESC);
          oprot.writeString(struct.clientToken);
          oprot.writeFieldEnd();
        }
        if (struct.orderDescription != null) {
          oprot.writeFieldBegin(ORDER_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.orderDescription);
          oprot.writeFieldEnd();
        }
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makePaymentEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public makePaymentEvent_argsTupleScheme getScheme() {
        return new makePaymentEvent_argsTupleScheme();
      }
    }

    private static class makePaymentEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<makePaymentEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makePaymentEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTotalPrice()) {
          optionals.set(0);
        }
        if (struct.isSetOrderCurrency()) {
          optionals.set(1);
        }
        if (struct.isSetClientToken()) {
          optionals.set(2);
        }
        if (struct.isSetOrderDescription()) {
          optionals.set(3);
        }
        if (struct.isSetUuid()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetTotalPrice()) {
          oprot.writeI32(struct.totalPrice);
        }
        if (struct.isSetOrderCurrency()) {
          oprot.writeString(struct.orderCurrency);
        }
        if (struct.isSetClientToken()) {
          oprot.writeString(struct.clientToken);
        }
        if (struct.isSetOrderDescription()) {
          oprot.writeString(struct.orderDescription);
        }
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makePaymentEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.totalPrice = iprot.readI32();
          struct.setTotalPriceIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orderCurrency = iprot.readString();
          struct.setOrderCurrencyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clientToken = iprot.readString();
          struct.setClientTokenIsSet(true);
        }
        if (incoming.get(3)) {
          struct.orderDescription = iprot.readString();
          struct.setOrderDescriptionIsSet(true);
        }
        if (incoming.get(4)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class makePaymentEvent_result implements org.apache.thrift.TBase<makePaymentEvent_result, makePaymentEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<makePaymentEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("makePaymentEvent_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new makePaymentEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new makePaymentEvent_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(makePaymentEvent_result.class, metaDataMap);
    }

    public makePaymentEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makePaymentEvent_result(makePaymentEvent_result other) {
    }

    public makePaymentEvent_result deepCopy() {
      return new makePaymentEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof makePaymentEvent_result)
        return this.equals((makePaymentEvent_result)that);
      return false;
    }

    public boolean equals(makePaymentEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(makePaymentEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("makePaymentEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class makePaymentEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public makePaymentEvent_resultStandardScheme getScheme() {
        return new makePaymentEvent_resultStandardScheme();
      }
    }

    private static class makePaymentEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<makePaymentEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, makePaymentEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, makePaymentEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class makePaymentEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public makePaymentEvent_resultTupleScheme getScheme() {
        return new makePaymentEvent_resultTupleScheme();
      }
    }

    private static class makePaymentEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<makePaymentEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, makePaymentEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, makePaymentEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serviceDiscoveryEvent_args implements org.apache.thrift.TBase<serviceDiscoveryEvent_args, serviceDiscoveryEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<serviceDiscoveryEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serviceDiscoveryEvent_args");

    private static final org.apache.thrift.protocol.TField REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serviceDiscoveryEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serviceDiscoveryEvent_argsTupleSchemeFactory();

    public java.lang.String remoteAddr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REMOTE_ADDR((short)1, "remoteAddr");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REMOTE_ADDR
            return REMOTE_ADDR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serviceDiscoveryEvent_args.class, metaDataMap);
    }

    public serviceDiscoveryEvent_args() {
    }

    public serviceDiscoveryEvent_args(
      java.lang.String remoteAddr)
    {
      this();
      this.remoteAddr = remoteAddr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serviceDiscoveryEvent_args(serviceDiscoveryEvent_args other) {
      if (other.isSetRemoteAddr()) {
        this.remoteAddr = other.remoteAddr;
      }
    }

    public serviceDiscoveryEvent_args deepCopy() {
      return new serviceDiscoveryEvent_args(this);
    }

    @Override
    public void clear() {
      this.remoteAddr = null;
    }

    public java.lang.String getRemoteAddr() {
      return this.remoteAddr;
    }

    public serviceDiscoveryEvent_args setRemoteAddr(java.lang.String remoteAddr) {
      this.remoteAddr = remoteAddr;
      return this;
    }

    public void unsetRemoteAddr() {
      this.remoteAddr = null;
    }

    /** Returns true if field remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteAddr() {
      return this.remoteAddr != null;
    }

    public void setRemoteAddrIsSet(boolean value) {
      if (!value) {
        this.remoteAddr = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REMOTE_ADDR:
        if (value == null) {
          unsetRemoteAddr();
        } else {
          setRemoteAddr((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REMOTE_ADDR:
        return getRemoteAddr();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REMOTE_ADDR:
        return isSetRemoteAddr();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serviceDiscoveryEvent_args)
        return this.equals((serviceDiscoveryEvent_args)that);
      return false;
    }

    public boolean equals(serviceDiscoveryEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_remoteAddr = true && this.isSetRemoteAddr();
      boolean that_present_remoteAddr = true && that.isSetRemoteAddr();
      if (this_present_remoteAddr || that_present_remoteAddr) {
        if (!(this_present_remoteAddr && that_present_remoteAddr))
          return false;
        if (!this.remoteAddr.equals(that.remoteAddr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRemoteAddr()) ? 131071 : 524287);
      if (isSetRemoteAddr())
        hashCode = hashCode * 8191 + remoteAddr.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(serviceDiscoveryEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRemoteAddr()).compareTo(other.isSetRemoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAddr, other.remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serviceDiscoveryEvent_args(");
      boolean first = true;

      sb.append("remoteAddr:");
      if (this.remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAddr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serviceDiscoveryEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceDiscoveryEvent_argsStandardScheme getScheme() {
        return new serviceDiscoveryEvent_argsStandardScheme();
      }
    }

    private static class serviceDiscoveryEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<serviceDiscoveryEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serviceDiscoveryEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.remoteAddr = iprot.readString();
                struct.setRemoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serviceDiscoveryEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.remoteAddr != null) {
          oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.remoteAddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serviceDiscoveryEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceDiscoveryEvent_argsTupleScheme getScheme() {
        return new serviceDiscoveryEvent_argsTupleScheme();
      }
    }

    private static class serviceDiscoveryEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<serviceDiscoveryEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serviceDiscoveryEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRemoteAddr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRemoteAddr()) {
          oprot.writeString(struct.remoteAddr);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serviceDiscoveryEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.remoteAddr = iprot.readString();
          struct.setRemoteAddrIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serviceDiscoveryEvent_result implements org.apache.thrift.TBase<serviceDiscoveryEvent_result, serviceDiscoveryEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<serviceDiscoveryEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serviceDiscoveryEvent_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serviceDiscoveryEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serviceDiscoveryEvent_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serviceDiscoveryEvent_result.class, metaDataMap);
    }

    public serviceDiscoveryEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serviceDiscoveryEvent_result(serviceDiscoveryEvent_result other) {
    }

    public serviceDiscoveryEvent_result deepCopy() {
      return new serviceDiscoveryEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serviceDiscoveryEvent_result)
        return this.equals((serviceDiscoveryEvent_result)that);
      return false;
    }

    public boolean equals(serviceDiscoveryEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(serviceDiscoveryEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serviceDiscoveryEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serviceDiscoveryEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceDiscoveryEvent_resultStandardScheme getScheme() {
        return new serviceDiscoveryEvent_resultStandardScheme();
      }
    }

    private static class serviceDiscoveryEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<serviceDiscoveryEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serviceDiscoveryEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serviceDiscoveryEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serviceDiscoveryEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceDiscoveryEvent_resultTupleScheme getScheme() {
        return new serviceDiscoveryEvent_resultTupleScheme();
      }
    }

    private static class serviceDiscoveryEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<serviceDiscoveryEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serviceDiscoveryEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serviceDiscoveryEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class servicePricesEvent_args implements org.apache.thrift.TBase<servicePricesEvent_args, servicePricesEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<servicePricesEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("servicePricesEvent_args");

    private static final org.apache.thrift.protocol.TField REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new servicePricesEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new servicePricesEvent_argsTupleSchemeFactory();

    public java.lang.String remoteAddr; // required
    public int serviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REMOTE_ADDR((short)1, "remoteAddr"),
      SERVICE_ID((short)2, "serviceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REMOTE_ADDR
            return REMOTE_ADDR;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVICEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(servicePricesEvent_args.class, metaDataMap);
    }

    public servicePricesEvent_args() {
    }

    public servicePricesEvent_args(
      java.lang.String remoteAddr,
      int serviceId)
    {
      this();
      this.remoteAddr = remoteAddr;
      this.serviceId = serviceId;
      setServiceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public servicePricesEvent_args(servicePricesEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRemoteAddr()) {
        this.remoteAddr = other.remoteAddr;
      }
      this.serviceId = other.serviceId;
    }

    public servicePricesEvent_args deepCopy() {
      return new servicePricesEvent_args(this);
    }

    @Override
    public void clear() {
      this.remoteAddr = null;
      setServiceIdIsSet(false);
      this.serviceId = 0;
    }

    public java.lang.String getRemoteAddr() {
      return this.remoteAddr;
    }

    public servicePricesEvent_args setRemoteAddr(java.lang.String remoteAddr) {
      this.remoteAddr = remoteAddr;
      return this;
    }

    public void unsetRemoteAddr() {
      this.remoteAddr = null;
    }

    /** Returns true if field remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteAddr() {
      return this.remoteAddr != null;
    }

    public void setRemoteAddrIsSet(boolean value) {
      if (!value) {
        this.remoteAddr = null;
      }
    }

    public int getServiceId() {
      return this.serviceId;
    }

    public servicePricesEvent_args setServiceId(int serviceId) {
      this.serviceId = serviceId;
      setServiceIdIsSet(true);
      return this;
    }

    public void unsetServiceId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    /** Returns true if field serviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    public void setServiceIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REMOTE_ADDR:
        if (value == null) {
          unsetRemoteAddr();
        } else {
          setRemoteAddr((java.lang.String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceId();
        } else {
          setServiceId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REMOTE_ADDR:
        return getRemoteAddr();

      case SERVICE_ID:
        return getServiceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REMOTE_ADDR:
        return isSetRemoteAddr();
      case SERVICE_ID:
        return isSetServiceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof servicePricesEvent_args)
        return this.equals((servicePricesEvent_args)that);
      return false;
    }

    public boolean equals(servicePricesEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_remoteAddr = true && this.isSetRemoteAddr();
      boolean that_present_remoteAddr = true && that.isSetRemoteAddr();
      if (this_present_remoteAddr || that_present_remoteAddr) {
        if (!(this_present_remoteAddr && that_present_remoteAddr))
          return false;
        if (!this.remoteAddr.equals(that.remoteAddr))
          return false;
      }

      boolean this_present_serviceId = true;
      boolean that_present_serviceId = true;
      if (this_present_serviceId || that_present_serviceId) {
        if (!(this_present_serviceId && that_present_serviceId))
          return false;
        if (this.serviceId != that.serviceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRemoteAddr()) ? 131071 : 524287);
      if (isSetRemoteAddr())
        hashCode = hashCode * 8191 + remoteAddr.hashCode();

      hashCode = hashCode * 8191 + serviceId;

      return hashCode;
    }

    @Override
    public int compareTo(servicePricesEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRemoteAddr()).compareTo(other.isSetRemoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAddr, other.remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServiceId()).compareTo(other.isSetServiceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceId, other.serviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("servicePricesEvent_args(");
      boolean first = true;

      sb.append("remoteAddr:");
      if (this.remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAddr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceId:");
      sb.append(this.serviceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class servicePricesEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public servicePricesEvent_argsStandardScheme getScheme() {
        return new servicePricesEvent_argsStandardScheme();
      }
    }

    private static class servicePricesEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<servicePricesEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, servicePricesEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.remoteAddr = iprot.readString();
                struct.setRemoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serviceId = iprot.readI32();
                struct.setServiceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, servicePricesEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.remoteAddr != null) {
          oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.remoteAddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeI32(struct.serviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class servicePricesEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public servicePricesEvent_argsTupleScheme getScheme() {
        return new servicePricesEvent_argsTupleScheme();
      }
    }

    private static class servicePricesEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<servicePricesEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, servicePricesEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRemoteAddr()) {
          optionals.set(0);
        }
        if (struct.isSetServiceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRemoteAddr()) {
          oprot.writeString(struct.remoteAddr);
        }
        if (struct.isSetServiceId()) {
          oprot.writeI32(struct.serviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, servicePricesEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.remoteAddr = iprot.readString();
          struct.setRemoteAddrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceId = iprot.readI32();
          struct.setServiceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class servicePricesEvent_result implements org.apache.thrift.TBase<servicePricesEvent_result, servicePricesEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<servicePricesEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("servicePricesEvent_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new servicePricesEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new servicePricesEvent_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(servicePricesEvent_result.class, metaDataMap);
    }

    public servicePricesEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public servicePricesEvent_result(servicePricesEvent_result other) {
    }

    public servicePricesEvent_result deepCopy() {
      return new servicePricesEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof servicePricesEvent_result)
        return this.equals((servicePricesEvent_result)that);
      return false;
    }

    public boolean equals(servicePricesEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(servicePricesEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("servicePricesEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class servicePricesEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public servicePricesEvent_resultStandardScheme getScheme() {
        return new servicePricesEvent_resultStandardScheme();
      }
    }

    private static class servicePricesEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<servicePricesEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, servicePricesEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, servicePricesEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class servicePricesEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public servicePricesEvent_resultTupleScheme getScheme() {
        return new servicePricesEvent_resultTupleScheme();
      }
    }

    private static class servicePricesEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<servicePricesEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, servicePricesEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, servicePricesEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serviceTotalPriceEvent_args implements org.apache.thrift.TBase<serviceTotalPriceEvent_args, serviceTotalPriceEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<serviceTotalPriceEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serviceTotalPriceEvent_args");

    private static final org.apache.thrift.protocol.TField REMOTE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAddr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SERVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TOTAL_PRICE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPriceResp", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serviceTotalPriceEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serviceTotalPriceEvent_argsTupleSchemeFactory();

    public java.lang.String remoteAddr; // required
    public int serviceID; // required
    public com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REMOTE_ADDR((short)1, "remoteAddr"),
      SERVICE_ID((short)2, "serviceID"),
      TOTAL_PRICE_RESP((short)3, "totalPriceResp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REMOTE_ADDR
            return REMOTE_ADDR;
          case 2: // SERVICE_ID
            return SERVICE_ID;
          case 3: // TOTAL_PRICE_RESP
            return TOTAL_PRICE_RESP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVICEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REMOTE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("remoteAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("serviceID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOTAL_PRICE_RESP, new org.apache.thrift.meta_data.FieldMetaData("totalPriceResp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serviceTotalPriceEvent_args.class, metaDataMap);
    }

    public serviceTotalPriceEvent_args() {
    }

    public serviceTotalPriceEvent_args(
      java.lang.String remoteAddr,
      int serviceID,
      com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp)
    {
      this();
      this.remoteAddr = remoteAddr;
      this.serviceID = serviceID;
      setServiceIDIsSet(true);
      this.totalPriceResp = totalPriceResp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serviceTotalPriceEvent_args(serviceTotalPriceEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRemoteAddr()) {
        this.remoteAddr = other.remoteAddr;
      }
      this.serviceID = other.serviceID;
      if (other.isSetTotalPriceResp()) {
        this.totalPriceResp = new com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse(other.totalPriceResp);
      }
    }

    public serviceTotalPriceEvent_args deepCopy() {
      return new serviceTotalPriceEvent_args(this);
    }

    @Override
    public void clear() {
      this.remoteAddr = null;
      setServiceIDIsSet(false);
      this.serviceID = 0;
      this.totalPriceResp = null;
    }

    public java.lang.String getRemoteAddr() {
      return this.remoteAddr;
    }

    public serviceTotalPriceEvent_args setRemoteAddr(java.lang.String remoteAddr) {
      this.remoteAddr = remoteAddr;
      return this;
    }

    public void unsetRemoteAddr() {
      this.remoteAddr = null;
    }

    /** Returns true if field remoteAddr is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteAddr() {
      return this.remoteAddr != null;
    }

    public void setRemoteAddrIsSet(boolean value) {
      if (!value) {
        this.remoteAddr = null;
      }
    }

    public int getServiceID() {
      return this.serviceID;
    }

    public serviceTotalPriceEvent_args setServiceID(int serviceID) {
      this.serviceID = serviceID;
      setServiceIDIsSet(true);
      return this;
    }

    public void unsetServiceID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    /** Returns true if field serviceID is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SERVICEID_ISSET_ID);
    }

    public void setServiceIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SERVICEID_ISSET_ID, value);
    }

    public com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse getTotalPriceResp() {
      return this.totalPriceResp;
    }

    public serviceTotalPriceEvent_args setTotalPriceResp(com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse totalPriceResp) {
      this.totalPriceResp = totalPriceResp;
      return this;
    }

    public void unsetTotalPriceResp() {
      this.totalPriceResp = null;
    }

    /** Returns true if field totalPriceResp is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalPriceResp() {
      return this.totalPriceResp != null;
    }

    public void setTotalPriceRespIsSet(boolean value) {
      if (!value) {
        this.totalPriceResp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REMOTE_ADDR:
        if (value == null) {
          unsetRemoteAddr();
        } else {
          setRemoteAddr((java.lang.String)value);
        }
        break;

      case SERVICE_ID:
        if (value == null) {
          unsetServiceID();
        } else {
          setServiceID((java.lang.Integer)value);
        }
        break;

      case TOTAL_PRICE_RESP:
        if (value == null) {
          unsetTotalPriceResp();
        } else {
          setTotalPriceResp((com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REMOTE_ADDR:
        return getRemoteAddr();

      case SERVICE_ID:
        return getServiceID();

      case TOTAL_PRICE_RESP:
        return getTotalPriceResp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REMOTE_ADDR:
        return isSetRemoteAddr();
      case SERVICE_ID:
        return isSetServiceID();
      case TOTAL_PRICE_RESP:
        return isSetTotalPriceResp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serviceTotalPriceEvent_args)
        return this.equals((serviceTotalPriceEvent_args)that);
      return false;
    }

    public boolean equals(serviceTotalPriceEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_remoteAddr = true && this.isSetRemoteAddr();
      boolean that_present_remoteAddr = true && that.isSetRemoteAddr();
      if (this_present_remoteAddr || that_present_remoteAddr) {
        if (!(this_present_remoteAddr && that_present_remoteAddr))
          return false;
        if (!this.remoteAddr.equals(that.remoteAddr))
          return false;
      }

      boolean this_present_serviceID = true;
      boolean that_present_serviceID = true;
      if (this_present_serviceID || that_present_serviceID) {
        if (!(this_present_serviceID && that_present_serviceID))
          return false;
        if (this.serviceID != that.serviceID)
          return false;
      }

      boolean this_present_totalPriceResp = true && this.isSetTotalPriceResp();
      boolean that_present_totalPriceResp = true && that.isSetTotalPriceResp();
      if (this_present_totalPriceResp || that_present_totalPriceResp) {
        if (!(this_present_totalPriceResp && that_present_totalPriceResp))
          return false;
        if (!this.totalPriceResp.equals(that.totalPriceResp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRemoteAddr()) ? 131071 : 524287);
      if (isSetRemoteAddr())
        hashCode = hashCode * 8191 + remoteAddr.hashCode();

      hashCode = hashCode * 8191 + serviceID;

      hashCode = hashCode * 8191 + ((isSetTotalPriceResp()) ? 131071 : 524287);
      if (isSetTotalPriceResp())
        hashCode = hashCode * 8191 + totalPriceResp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(serviceTotalPriceEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRemoteAddr()).compareTo(other.isSetRemoteAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAddr, other.remoteAddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetServiceID()).compareTo(other.isSetServiceID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceID, other.serviceID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTotalPriceResp()).compareTo(other.isSetTotalPriceResp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalPriceResp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPriceResp, other.totalPriceResp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serviceTotalPriceEvent_args(");
      boolean first = true;

      sb.append("remoteAddr:");
      if (this.remoteAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAddr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceID:");
      sb.append(this.serviceID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("totalPriceResp:");
      if (this.totalPriceResp == null) {
        sb.append("null");
      } else {
        sb.append(this.totalPriceResp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (totalPriceResp != null) {
        totalPriceResp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serviceTotalPriceEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceTotalPriceEvent_argsStandardScheme getScheme() {
        return new serviceTotalPriceEvent_argsStandardScheme();
      }
    }

    private static class serviceTotalPriceEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<serviceTotalPriceEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serviceTotalPriceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REMOTE_ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.remoteAddr = iprot.readString();
                struct.setRemoteAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serviceID = iprot.readI32();
                struct.setServiceIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOTAL_PRICE_RESP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.totalPriceResp = new com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse();
                struct.totalPriceResp.read(iprot);
                struct.setTotalPriceRespIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serviceTotalPriceEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.remoteAddr != null) {
          oprot.writeFieldBegin(REMOTE_ADDR_FIELD_DESC);
          oprot.writeString(struct.remoteAddr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SERVICE_ID_FIELD_DESC);
        oprot.writeI32(struct.serviceID);
        oprot.writeFieldEnd();
        if (struct.totalPriceResp != null) {
          oprot.writeFieldBegin(TOTAL_PRICE_RESP_FIELD_DESC);
          struct.totalPriceResp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serviceTotalPriceEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceTotalPriceEvent_argsTupleScheme getScheme() {
        return new serviceTotalPriceEvent_argsTupleScheme();
      }
    }

    private static class serviceTotalPriceEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<serviceTotalPriceEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serviceTotalPriceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRemoteAddr()) {
          optionals.set(0);
        }
        if (struct.isSetServiceID()) {
          optionals.set(1);
        }
        if (struct.isSetTotalPriceResp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRemoteAddr()) {
          oprot.writeString(struct.remoteAddr);
        }
        if (struct.isSetServiceID()) {
          oprot.writeI32(struct.serviceID);
        }
        if (struct.isSetTotalPriceResp()) {
          struct.totalPriceResp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serviceTotalPriceEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.remoteAddr = iprot.readString();
          struct.setRemoteAddrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serviceID = iprot.readI32();
          struct.setServiceIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.totalPriceResp = new com.worldpay.innovation.wpwithin.rpc.types.TotalPriceResponse();
          struct.totalPriceResp.read(iprot);
          struct.setTotalPriceRespIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class serviceTotalPriceEvent_result implements org.apache.thrift.TBase<serviceTotalPriceEvent_result, serviceTotalPriceEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<serviceTotalPriceEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("serviceTotalPriceEvent_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new serviceTotalPriceEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new serviceTotalPriceEvent_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(serviceTotalPriceEvent_result.class, metaDataMap);
    }

    public serviceTotalPriceEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public serviceTotalPriceEvent_result(serviceTotalPriceEvent_result other) {
    }

    public serviceTotalPriceEvent_result deepCopy() {
      return new serviceTotalPriceEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof serviceTotalPriceEvent_result)
        return this.equals((serviceTotalPriceEvent_result)that);
      return false;
    }

    public boolean equals(serviceTotalPriceEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(serviceTotalPriceEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("serviceTotalPriceEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class serviceTotalPriceEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceTotalPriceEvent_resultStandardScheme getScheme() {
        return new serviceTotalPriceEvent_resultStandardScheme();
      }
    }

    private static class serviceTotalPriceEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<serviceTotalPriceEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, serviceTotalPriceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, serviceTotalPriceEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class serviceTotalPriceEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public serviceTotalPriceEvent_resultTupleScheme getScheme() {
        return new serviceTotalPriceEvent_resultTupleScheme();
      }
    }

    private static class serviceTotalPriceEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<serviceTotalPriceEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, serviceTotalPriceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, serviceTotalPriceEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class errorEvent_args implements org.apache.thrift.TBase<errorEvent_args, errorEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<errorEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("errorEvent_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new errorEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new errorEvent_argsTupleSchemeFactory();

    public java.lang.String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(errorEvent_args.class, metaDataMap);
    }

    public errorEvent_args() {
    }

    public errorEvent_args(
      java.lang.String msg)
    {
      this();
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public errorEvent_args(errorEvent_args other) {
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public errorEvent_args deepCopy() {
      return new errorEvent_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
    }

    public java.lang.String getMsg() {
      return this.msg;
    }

    public errorEvent_args setMsg(java.lang.String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof errorEvent_args)
        return this.equals((errorEvent_args)that);
      return false;
    }

    public boolean equals(errorEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMsg()) ? 131071 : 524287);
      if (isSetMsg())
        hashCode = hashCode * 8191 + msg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(errorEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("errorEvent_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class errorEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public errorEvent_argsStandardScheme getScheme() {
        return new errorEvent_argsStandardScheme();
      }
    }

    private static class errorEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<errorEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, errorEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, errorEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class errorEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public errorEvent_argsTupleScheme getScheme() {
        return new errorEvent_argsTupleScheme();
      }
    }

    private static class errorEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<errorEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, errorEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, errorEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class errorEvent_result implements org.apache.thrift.TBase<errorEvent_result, errorEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<errorEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("errorEvent_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new errorEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new errorEvent_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(errorEvent_result.class, metaDataMap);
    }

    public errorEvent_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public errorEvent_result(errorEvent_result other) {
    }

    public errorEvent_result deepCopy() {
      return new errorEvent_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof errorEvent_result)
        return this.equals((errorEvent_result)that);
      return false;
    }

    public boolean equals(errorEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(errorEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("errorEvent_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class errorEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public errorEvent_resultStandardScheme getScheme() {
        return new errorEvent_resultStandardScheme();
      }
    }

    private static class errorEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<errorEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, errorEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, errorEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class errorEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public errorEvent_resultTupleScheme getScheme() {
        return new errorEvent_resultTupleScheme();
      }
    }

    private static class errorEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<errorEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, errorEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, errorEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
